/*
    Node.js가 주목을 받는 것은 "서버측의 개발", 즉 "백엔드"에서다.

    서버 측의 개발은 크게 2가지로 나뉜다:
        1. "Web 서버 + 프로그램" 
            -> PHP라는 프로그래밍 언어에서 많이 사용되는 방식.
            -> 렌탈 서버를 이용하는 경우에 많이 사용된다. 렌탈 서버가 PHP 대응되면 스크립트 올려서 실행.
            -> 실행하는 처리의 부분만 스크립트로서 제작하면 되니까 개발도 간편하다.

           * Flow
                서버에서 실행하는 프로그램을 작성하여 설치한다. 
                서버 측에서는, 통상의 Web서버가 있고, 거기에 그 프로그램을 실행하는 환경이 있다.
                Web서버에 접속하면, 필요에 따라서 지정한 프로그램이 실행되도록 되어있다.

        2. "Web 서버의 프로그램 그 자체를 서버에서 실행하여 움직인다"
            -> 최근,  클라우드 서비스를 이용한 웹 어플 개발에서 다용된다.
            -> 클라우드 서비스: 서버 측에 프로그램을 설치하여 실행할 수 있기 때문에, 웹 서버 자체를 자신이 준비 필요.
            -> 즉, 웹서버를 만들어버리는 것이, 자기자신이 제어할 수 있게 되고 유연한 처리가 가능하다.
            -> Node.js가 이 용도에 많이 사용된다.


            * Flow
                웹서버의 프로그램 그 자체를 개발하여 설치한다.
                자기자신이 Web에 접속했을 때의 처리를 모두 만들기 때문에, 어떠한 처리도 장착 가능.

*/

/*
    Node.js에서는, 웹서버로서 기본적인 기능이, "모듈"로서 준비되어있다.
    따라서, 단지 불러오는 것만으로, 매우 간편하게 웹서버의 기본적인 처리를 실장할 수 있다. 

    간단히 생각하면,
    웹서버 = 누군가 특정 주소에 접속 -> 그 주소로 표시하는 내용 (HTML 텍스트)를 송신한다.
*/


// 간단한 예시

const http = require('http'); // http라는 오브젝트를 임포트해서 사용할 수 있도록 하였다.

var server = http.createServer( // 서버의 처리를 위한 오브젝트의 작성. 이건, http 오브젝트의 createServer라는 메소드로 장착.
                                // 이 http는, http프로토콜 (웹서버와 웹브라우저 간의 소통을 결정짓는 것)에 의한 처리 전반을 담당하는 오브젝트.
    (req, res) => {
        res.end('Hello, Node.js!!!'); // 서버에 접속했을 때의 처리. end가, 인수를 지정한 값을 엑세스해서 접속한 쪽에 보낸다.
    }
)
server.listen(3000); // 준비가 되었다면 대기중인 상태가 된다. 이를 행하는 것이 listen 메소드.